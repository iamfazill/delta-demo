GIT AND GITHUB
    Git is a version control tool that helps to track changes in our code 
    It is used to track the history of our code

GITHUB
    A website where we host our repositories
    It is a website that allows the developers to store and manage their code using GIT
    We usually upload them in the form of a folder, these folders are knows as 
    repositories

    Any changes in the github are called commit
    It is a two step process
    we first add something, then we commit to make changes
    If we add the commit button we get two types of codes
    1. green:- the code changes, that we added recently
    2. red:- that code changes, that we deleted or modified
        Note:- What is the difference between Modify and delete

USING GIT
    Git can be used via command line
    It can also be used via code editors
    MAC OS has already by default git installed
    To check if git is installed or not we can use a command <git --version>
    To know the differnt commands of Git, we can simply type <git> in the command line


GIT CONFIGURING GIT
    Configuring git, means to set up some basic things
    First we setup our username and our email
    this implies that git should know in advance that by which name its going to commit 
    changes and on which account

    to setup name

    git config --global user.name "iamfazill"
    git config --global user.email "fazilshehri@gmail.com"

    git config --list

BASIC GIT COMMANDS
    1. CLONE :- Cloning a repository to our local machine 
        copying code or project in our local machine
        git clone <some Link>
    2.status :- Displays the status of the code 
        git status

        File Status Life Cycle
            1. Untracked file:- Git has no knowledge about these files
                we need to add the files so that the git can track them

            2. Unmodified file:- when file is added, it is in the unmodified state for the git
            3. Modify:- Now if we made any change to the file, it goes to the modified
                state
            4. When we modify any file, there is always a two step process to finalize that
                modification.
                1. First we <Stage> our file
                2. second we commit the file. 
                Note:- once commited, the file comes to the unmodified stage again
    When we already have some modified files, when we add them, there states changes
    from modified to staged, means they are ready to be committed

    Add:- adds new or changed files in our working directory to the git staging already
        git add <fileName>
    Commit:- It is the record of changes
        git commit -m "Some Message"
    Push:- Upload the local repo content to remote app
        git push origin main

    In short, any change to finalize, it is a two step process
        1. Add the file
        2. commit the file

    git add . => adds all the untracked or modified files to the staging area

    INIT Command:-
        Used to create a new git repo from our local machine
        git init
    
        Some other commands used with Init command
        git remote add origin <link>
        git remote -v => to verify remote
        git branch => to check branch
        git  branch -M Main (to rename branch)
        git push origin main

        instead of git push origin main, we can also use
        git push -u origin main // this is for setting the push for the origin to main branch
        only once. Then after we can only use git push to push the code to the main branch

        Also if we have only one single file to be committed, we can add and commit it in 
        a single command as git commit -am "message"
BRANCHES
    BRANCH COMMANDS
    1. git branch -->To check the current branch we are on
    2. git branch -m main --> To rename branch we are currently on
    3. git checkout <branchName> --> to navigate
    4. git checkout -b <new branch Name> -->to create a new branch
    5. git checkout -d <branchName> --> to delete branch

    To Merge the code of one branch into the other one, we use pull requests

    MERGING CODE
        git diff <branch name>
            to compare commits,branches files and more
        git merge <branch name>

        create a pull requests
        
    git pull
        git pull origin main.
         used to fetch the changes from the github in the local machine

MERGE CONFLICT
    An event that takes place when git is unable to automatically resolve differences in
    code between two commits

FIXING MISTAKES
    CASE 1: how to un add the staged changes
        git reset <file name>
        git reset -->unstage all the files that were added
    CASE 2:- Commited changes for one commit
            gir reset HEAD~1
            resets back the committed change
    CASE 3:- RESET THE COMMITED CHANGES FOR MANY commits
        git log --> contains the hash codes for every commit, we can use these codes
        to get back to any commit
        git reset <hashcode>
        git reset --hard <hashcode>
FORKING
    A fork is a new repository that shares code and visibility setings with the original
    upstream repository
    fork is a rough copy
     



    